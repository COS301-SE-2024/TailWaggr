name: Flutter Testing

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '12.x'

    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.x'

    - name: Install dependencies
      run: flutter pub get
      working-directory: cos301_capstone

    - name: Run tests with coverage
      run: flutter test --coverage
      working-directory: cos301_capstone
      continue-on-error: true

    - name: Upload coverage to Codecov
      if: always()  
      uses: codecov/codecov-action@v2
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: coverage/lcov.info

  lighthouse:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Create Lighthouse Results Directory
      run: mkdir -p ./lighthouse-results

    - name: Lighthouse Check
      uses: foo-software/lighthouse-check-action@v12.0.1
      with:
        urls: |
          https://tailwaggr.web.app
        outputDirectory: './lighthouse-results'
        device: 'desktop'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: List Lighthouse Results Directory
      run: ls -la ./lighthouse-results

    - name: Print results.json for Debugging
      run: cat ./lighthouse-results/results.json

    - name: Extract Performance Score
      id: extract_score
      run: |
        REPORT_FILE=$(find ./lighthouse-results -name 'results.json' | head -n 1)
        if [ -z "$REPORT_FILE" ]; then
            echo "Error: Report file not found"
            exit 1
        fi

        SCORE=$(jq '.[0].scores.performance // 0 * 100' "$REPORT_FILE")
        if [ "$SCORE" = "null" ]; then
            SCORE=0
        fi
        echo "PERFORMANCE_SCORE=${SCORE%.*}" >> $GITHUB_ENV

    - name: Generate Lighthouse Badge URL
      id: generate_lighthouse_badge
      run: |
        BADGE_URL="https://img.shields.io/badge/Performance-${{ env.PERFORMANCE_SCORE }}-brightgreen"
        echo "BADGE_URL=${BADGE_URL}" >> $GITHUB_ENV
        echo "Lighthouse Performance Badge URL: ${BADGE_URL}" >> badges.txt

    # - name: Commit badge URLs file
    #   run: |
    #     git config --global user.name 'github-actions[bot]'
    #     git config --global user.email 'github-actions[bot]@users.noreply.github.com'
    #     git add badges.txt
    #     git commit -m "Update badge URLs"
    #     git push
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}